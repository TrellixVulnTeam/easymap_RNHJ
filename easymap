#!/usr/bin/env python

# ./easymap -n project_name -w snp -sim -r at -g chr1+4.gff -rs ref -cr bc -co par_mut -sm 600+e -sr 0,14-1,31-2,33-3,15-4,5-5,2/0,24-1,42-2,25-3,6-4,1-5,2+1,5860210+r+100 -ss 25+100,0+500,100+1+50+se
#
# Recombination frequencies:
# chr1: 0,14-1,31-2,33-3,15-4,5-5,2
# chr2: 0,26-1,42-2,25-3,5-4,1-5,1
# chr3: 0,20-1,39-3,28-4,2-5,1
# chr4: 0,24-1,43-2,25-3,6-4,1-5,1
# chr5: 0,16-1,34-2,31-3,14-4,4-5,1

# ./easymap -n ins-test -w ins -sim -r at2 -i at_chloroplast.fa -g chr1+4.gff -sm 10 -ss 15+100,0+500,100+1+50+pe

import argparse, os, fnmatch
from subprocess import call

parser = argparse.ArgumentParser()
parser.add_argument('--usage', '-u', action = 'store_true', dest = 'usage')
parser.add_argument('--project-name', '-n', action = 'store', default = '', dest = 'project_name')
parser.add_argument('--workflow', '-w', action = 'store', default = 'n/p', dest = 'workflow', choices = set(('snp','ins')))
parser.add_argument('--simulate-data', '-sim', action = 'store_true', dest = 'simulate')
parser.add_argument('--reference-sequence', '-r', action = 'store', default = 'n/p', dest = 'ref_seq') 
parser.add_argument('--insertion-sequence', '-i', action = 'store', default = 'n/p', dest = 'ins_seq')
parser.add_argument('--gff-file','-g', action = 'store', default = 'n/p', dest = 'gff_file')
parser.add_argument('--ann-file', '-a', action = 'store', default = 'n/p', dest = 'ann_file')
parser.add_argument('--reads-problem', '-P', action = 'store', default = 'n/p', dest = 'reads_sample')
parser.add_argument('--reads-control','-C', action = 'store', default = 'n/p', dest = 'reads_control')
parser.add_argument('--is-ref-strain','-rs', action = 'store', default = 'n/p', dest = 'is_ref_strain', choices = set(('ref','noref')))
parser.add_argument('--cross-type', '-cr', action = 'store', default = 'n/p', dest = 'cross_type', choices = set(('oc','bc')))
parser.add_argument('--control-type','-co', action = 'store', default = 'n/p', dest ='control_type', choices = set(('par_mut','par_nomut','f2wt')))
#parser.add_argument('--simulate-reads', '-sim', action = 'store_true', dest = 'simulate_reads')
parser.add_argument('--sim-mut', '-sm', action = 'store',default = 'n/p', dest = 'sim_mut')
parser.add_argument('--sim-recsel','-sr', action = 'store', default = 'n/p', dest = 'sim_recsel')
parser.add_argument('--sim-seq', '-ss', action = 'store', default = 'n/p', dest = 'sim_seq')

args = parser.parse_args()


generic_help_message = "Please refer to the documentation for comprehensive help."

if args.usage:
	print "Please see section 'easymap commad line arguments' in the documentation."
	#print "--project_name (-n): name of the project, must not contain any space, if not given, would be <project> as a default.\n--workflow (-w): choose between <snp> or ins depending on whether you desire to run one workflow or another.\n--data_source (-d): it is set  <exp> (experimental) as a default, it can be written with the parameter <sim> if a simulation is intended to be performed. --reference-sequence (-r): please specify the name of the file in user_projects with a <.fa> ending(do not write it with the fa), it is important to give a substring which is identical in the different contig files you may have. --ins_seq(-i): when performing an insertional analysis it is necessary to be given the name of a fasta file containing the insertion or insertional vector which is saved in user_data. --gff_file(-g) please give the name of a gff format file which contain the contigs are going to be analyzed, it should be held in user_projects. --reads_problem(-P): please specify the name of the fastq format reads desired to be analyzed, they must be held in user_projects, if they are pared end reads they should be written with a coma between the read files names <forward_read,reverse_read>.\n--reads-control(-C) please specify the name of the files held in user_projects which are intended to be the control ones (only in snp analysis mode).\n--is_ref_strain(-rs): parameter used in snp mode, it has to options <ref> and <noref> depending on whether the problem population are in the same strain than the reference genome given or not.\n--cross_type (-cr) snp mode parameter that has to be chosen between <oc> meaning outcross and <bc> meaning backcross depending on the experimental design.\ncontrol_type snp mode parameter that specifies if the control used is a parental or a wild type F2 bulk population <f2wt>. If it is "
	quit()

if args.project_name == "n/p":
	project_name = "unnamed_project"
else: project_name = args.project_name

if args.workflow == "n/p":
	print "ERROR: Argument -w/--workflow is required. " + generic_help_message
	quit()
else: workflow = args.workflow

if args.gff_file == "n/p":
	print "ERROR: Argument -g/--gff-file is required. " + generic_help_message
	quit()

if args.ref_seq == "n/p":
	print "ERROR: Argument -r/--reference-sequence is required. " + generic_help_message
	quit()

workflow = args.workflow
gff_file = args.gff_file

# Fill the vaiable data_source with 'sim' or 'exp' depending on whether the user used or not the --simulate/-sim flag
if args.simulate:
	data_source = 'sim'
else:
	data_source = 'exp'

ref_seq = args.ref_seq
ins_seq = args.ins_seq
reads_sample = args.reads_sample
ann_file = args.ann_file
sim_mut = args.sim_mut
sim_recsel = args.sim_recsel
sim_seq = args.sim_seq
control_type = args.control_type
if control_type == "n/p":
	control_parental = "n/p"
	snp_analysis_type = "n/p"
cross_type = args.cross_type
reads_control = args.reads_control
is_ref_strain = args.is_ref_strain
read_s = "n/p"
read_f = "n/p"
read_r = "n/p"
read_s_control = "n/p"
read_f_control = "n/p"
read_r_control = "n/p"
lib_type_control = "n/p"
lib_type_sample = "n/p"
snp_analysis_type = "n/p"


problems = []
error = 0


# Check whether the user has provided a project_name and it has no space:  
is_there_space = project_name.split(" ")
if len(is_there_space) != 1:
	error = 1
	problems.append("Please select a project name (--project_name)(-n) whithout any empty space. See the documentation (--usage)(-u) in order to obtain more information regarding this format.")
#Check whether user_data directory exists
input_folder = "./user_data"
if os.path.isdir(input_folder) == False:
	error = 1
	problems.append("Easymap could not find "+ input_folder + ". Please create the folder and place your input files inside.")
#THE FOLLOWING LINES ARE DEPRECATED
#else:
#	#Check whether there are reference file/s in 0_input/gnm_ref
#	try:
#		gnm_ref_folder = "./user_data/gnm_ref" #Looks in the path were the file/s should be found
#		if not os.listdir(gnm_ref_folder): #This function creates a list of the items in the specified path. Thus, if no items are found, the result of the function will be FALSE
#		    error = 1
#		    problems.append("The reference file/files should be in the directory " + gnm_ref_folder)
#	except:
#		error = 1
#		problems.append("No folder"+ gnm_ref_folder + " has been found, please create the folder and include the reference genome") 


# Create a list with the names of all the files in the folder user_data
input_files = os.listdir(input_folder)

# Check -rs input
# First, check that the user string does not have any spaces or dots in it. We need the basename of the file (basename.fa) or files (1.basename.fa, 2.basename.fa, ...)
# ? Checking for spaces and dots isn't really necessary because any name with these will not match any valid .fa file in the folder /user_data.
if len(ref_seq.split(".")) != 1:
	error = 1
	problems.append("The name provided to argument -r/--reference-sequence cannot contain dots.")
if len(ref_seq.split(" ")) != 1:
	error = 1
	problems.append("The name provided to argument -r/--reference-sequence cannot contain spaces.")

# Check if there are .fa files in the folder user_data that have the string provided by the user as basename
refs_in_input_files = fnmatch.filter(input_files, '*'+ref_seq+'.fa') # fnmatch filters a list using a string that accepts wildcards

if not refs_in_input_files:
	error = 1
	problems.append("The name provided to argument -r/--reference-sequence does not match the basename of any .fa file in the folder /user_data.")

#Check the existence of gff file in the appropiate folder
if gff_file not in input_files:
		error = 1
		problems.append("The name provided to argument -g/--gff-file does not match any file in the folder /user_data.")

#In case the user decides to give an annotation file, it will be checked whether it is in the corresponding place.
if ann_file != "n/p":
	if ann_file not in input_files:
		error =1
		problems.append("Annotation file has been specified to be used (--ann_file)(-a), but the name given has not been succesfully found in user_data")

#In the analysis mode of snp, cross_type, is_ref_strain and control_parental are required parameters
if workflow == "snp":
	
	if control_type == "f2wt": snp_analysis_type = "f2wt"
	else: snp_analysis_type = control_type.split("_")[0]; control_parental = control_type.split("_")[1]

	if snp_analysis_type == "f2wt":
		if cross_type == "oc":
			error = 1
			problems.append("This program does not support an experimental design in which an outcross is performed and a wild type F2-bulk is used as control. Please see web-based documentation regarding experimental designs for more details.")
		else:
			cross_type = "bc"
			control_parental = "n/p"
			if data_source == "sim":
				if is_ref_strain == "n/p":
					error = 1
					problems.append("In order to use simulation data of snp with f2wt control line, it is necessary to provide --is-ref-strain / -rs argument as ref/noref. Please see web-based documentation regarding experimental designs for more details.")
			else:
				is_ref_strain = "n/p"

	if snp_analysis_type == "par":
		if cross_type == "n/p" or is_ref_strain== "n/p" or control_parental == "n/p": 
			error = 1
			if cross_type == "n/p": problems.append("Snp mode requires value oc/bc in --cross-type / -cr")
			if is_ref_strain == "n/p": problems.append("Snp mode requires value ref/noref in --is-ref-strain / -rs") 
			if control_parental == "n/p": problems.append("Snp mode requires value par_mut/par_nomut in --control-type / -co") 
		if cross_type == "oc" and is_ref_strain == "noref" and control_parental == "nomut":
			error = 1
			problems.append("Unfortunatelly this software does not allow the process of an outcross which is not in the reference background using as a control a parental in a polymorfic background. Please see web-based documentation regarding experimental designs for more details.")
		if cross_type == "bc" and is_ref_strain =="noref":
			error = 1
			problems.append("In order to perform a snp analysis having a parental as a control, a backcross analysis requires to be in the reference background.Please see web-based documentation regarding experimental designs for more details.")
		if cross_type == "bc" and is_ref_strain == "ref":
			if control_parental != "mut":
				print "Please mind a backcross analysis in reference background always has a parental in the mutant strain"	
				control_parental = "mut"


#If the analysis mode is insertions, an insertion sequence must be given
if workflow == "ins":
	if ins_seq == "n/p":
		error = 1
		problems.append("Argument -i/--insertion-sequence is required.")
	else:
		if ins_seq not in input_files:
			error = 1
			problems.append("The name provided to argument -i/--insertion-sequence does not match any file in the folder /user_data.")

#If the user is not providing its own data, there are a number of extra parameters to fullfil, related to the simulation process: $sim_mut $sim_recsel $sim_seq

    
if data_source == "sim":
	if workflow == "snp": 
		if sim_mut == "n/p" or sim_recsel == "n/p" or sim_seq == "n/p" or snp_analysis_type == "n/p":
			error = 1
			if sim_mut == "n/p" : problems.append("Simulated snp data requires --sim_mut / -sm parameter. Check documentation (--usage)(-u) for more information regarding the format.") 
			if sim_recsel == "n/p": problems.append("Simulated snp data requires --sim-recsel / -sr parameter. Check documentation (--usage)(-u) for more information regarding the format.") 
			if sim_seq == "n/p": problems.append("Simulated snp data requires --sim-seq / -ss parameter. Check documentation (--usage)(-u) for more information regarding the format.") 
			#if snp_analysis_type == "n/p": problems.append("The parameter --snp_analysis_type / - is required, choose between parental or f2wt as a control ") It is no longer required for the user
	else:
		if sim_mut == "n/p" or sim_seq == "n/p":
			error = 1
			problems.append("In order to perform the simulation mode (--simulate_data)(-sim) for inserctions (workflow = ins) parameters sim_mut and sim_seq must be given.See the documentation (--usage)(-u) in order to obtain more information regarding this format. ")
	


	#Check sim_mut ex: 40+e 
	try:
		values = sim_mut.split("+")
		if len(values) == 2:
			number = int(values[0])
			options = ["e", "d","li"]
			if values[1] not in options and workflow == "snp":
				error =1
				problems.append("The parameter --sim_mut / -sm requires a second parameter that has to be <  e  > if the mode is EMS mutations or <  d  > if the mode is drift mutations")
				if values[1] == "li":
					error =1
					problems.append("The parameter --sim_mut / -sm requires a second parameter that has to be <  li  > in insertion mode. A non-defined parameter is also accepted")	
		elif len(values)== 1 and workflow == "ins":
			number = int(values[0])
			sim_mut = sim_mut+"+li"

		else:
			error = 1	
			problems.append("The parameter --sim_mut / -sm requires more arguments. Number_of_mutations(+mode)*     *Only required in snp mode, in insertion mode it is not needed. ee the documentation (--usage)(-u) in order to obtain more information regarding this format. ")
	except:
		error = 1
		problems.append("Please mind the format of --sim_mut / -sm: number_of_mutations+mode  where number_of_mutations is any positive number and mode has to be chosen between e (EMS) and d (drift). See the documentation (--usage)(-u) in order to obtain more information regarding this format.")
	
	if workflow == "snp":
		number_of_contigs = 0
		for items in refs_in_input_files:
			with open(input_folder+"/"+items,"r") as contig_file:
				for l in contig_file:
					i = l.count(">")
					number_of_contigs += i
		
		#0,14-1,31-2,33-3,15-4,5-5,2/0,24;1,42;2,25;3,6;4,1;5,1+1,10000000+r+50
		try: 
			values = sim_recsel.split("+")
			if len(values) == 4:
				
				chromo = values[0].split("/")

				if len(chromo) != number_of_contigs:
					error = 1
					problems.append("The recombination frequences given at  the first parameter of --sim-rec-sel /-sr do not match the number of fasta files found in user_data.")
				for ch in chromo:
					c = ch.split("-")
					for v in c:
						v = v.split(",")
						if len(v) != 2 or not v[0] or not v[1] : error = 1, problems.append("One or more than one of the values you supplied as recombination frequences for --sim-rec-sel /-sr input in simulator does not contain the two required values 2,50 being 2 the number of events of recombination and 50 the probability of happening. See the documentation (--usage)(-u) in order to obtain more information regarding this format.") 
						if not v[1]: error =1
						if not v[0]: error =1 			
				val = values[1].split("-")
				for mutations in val: val1= mutations.split(",");int(val1[0]);int(val1[1])
				
				options = ["r", "d","dr"] 
				if values[2] not in options:
					error = 1
					problems.append("Please, choose a valid selection mode in --sim-rec-sel /-sr: < r > for recesive mutations or < d > dominant mutations or <dr> for double recessive mutations. See the documentation (--usage)(-u) in order to obtain more information regarding this format.")	
				int(values[3])
			else:
				error =1
				problems.append("Please, mind the format of --sim-rec-sel /-sr. The number of arguments given are do not match the required ones. See the documentation (--usage)(-u) in order to obtain more information regarding this format." ) 
		except:
			error = 1
			problems.append("Please, mind the format of --sim-rec-sel /-sr. Unexpected inputs were given. See the documentation (--usage)(-u) in order to obtain more information regarding this format.")
	#sim_seq 1+100,0+500,100+1+50+se           
	try:
		values = sim_seq.split("+")
		val1 = values[1].split(",")
		val2 = values[2].split(",")
		int(values[0])
		int(val1[0])
		int(val1[1])
		int(val2[0])
		int(val2[1])
		int(values[3])
		int(values[4])
		options = ("se","pe")
		values[5] = values[5].lower()
		if values[5] not in options:
			error = 1
			problems.append("Please introduce se/pe as the last input in sim_seq, ex: 1+100,0+500,100+1+50+se ") #It is no longer required for the user. It depends on the number of arguments are given in the read argument.
		else:			
			lib_type_sample = values[5]
			lib_type_control = values[5]

	except:
		error = 1
		problems.append("Unexpected arguments were given in --sim-seq / -ss. See the documentation (--usage)(-u) in order to obtain more information regarding this format.")
		#append error


#If the user is providing its own data (not simulating reads), reads should be provided:
if data_source == "exp":
	if reads_sample == "n/p":
		error = 1
		problems.append("Argument -P/--reads-problem is required.")
	else:
		RS= reads_sample.split(",")
		if len(RS) == 1:
			lib_type_sample = "se" 
			read_s = reads_sample
		elif len(RS) == 2:
			lib_type_sample ="pe"
			read_f = RS[0]
			read_r= RS[1]
	#If single-end reads or paired-end reads are not given
	if lib_type_sample == "pe":
		if read_f not in input_files: 
			error = 1
			problems.append("The first name provided to argument -P/--reads-problem does not match any file in the folder /user_data.")
		if read_r not in input_files:
			error = 1
			problems.append("The second name provided to argument -P/--reads-problem does not match any file in the folder /user_data.")
		else: 
			if read_f == read_r:
				error = 1
				problems.append("The two names provided to argument -P/--reads-problem are identical.")
	if lib_type_sample == "se":
		if reads_sample not in input_files:
			error = 1
			problems.append("The name provided to argument -P/--reads-problem does not match any file in the folder /user_data.")	


	#For snp mode, control reads should be provided for the further procesing. 
	if workflow == "snp":
		if reads_control == "n/p":
			error = 1
			problems.append("Experimental data requires reads of your controls. Please give them in the parameter --reads_control / -C FILE, (FILE2,if they are paired-end)")
		else:
			RC = reads_control.split(",") 
			if len(RC) == 1:
				lib_type_control = "se" 
				read_s_control = reads_control
			elif len(RC) == 2:
				lib_type_control ="pe"
				read_f_control = RC[0]
				read_r_control =RC[1]
		if lib_type_control == "pe":
			if read_f_control not in input_files:
				error = 1
				problems.append("Please introduce the files containing the control forward reads in " + input_folder)
			if read_r_control not in input_files:
				error = 1
				problems.append("Please introduce the files containing the control reverse reads in " + input_folder)
			else:
				if read_f_control == read_r_control:
					error = 1
					problems.append("Please notice both control read files have the same name")
		if lib_type_control== "se":
			if reads_control not in input_files:
				error = 1
				problems.append("Please introduce the file containing the control reads in " + input_folder)	


if error == 1:
	print "ERROR. Please fix the following issues in your command:"
	for items in problems:
		print "-" + items
	print generic_help_message
	quit()	

#                      1                    2                3                   4               5               6                7                8              9              10             11                      12                     13                     14                     15                       16                    17                 18                        19                       20              21                 22      
master_program_input = project_name + " " + workflow + " " + data_source + " " + ref_seq + " " + ins_seq + " " + gff_file + " " + ann_file + " " + read_s + " " + read_f + " " + read_r + " " + lib_type_sample + " " + read_s_control + " " + read_f_control + " " + read_r_control + " " + lib_type_control + " " + is_ref_strain + " " + cross_type + " " + snp_analysis_type + " " + control_parental + " " + sim_mut + " " + sim_recsel + " " + sim_seq

#print master_program_input

call("./easymap.sh " + master_program_input, shell=True)
